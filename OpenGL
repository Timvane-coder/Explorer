from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
import sys
import math
import struct
import os

PI = 3.14159265359

camera_angle = 0
camera_x = 0
camera_y = 0
camera_height = 6
camera_rotate_speed = 0.003
camera_distance = 40

eye_x = 0
eye_y = 0
eye_z = 0

camera_x_angle = 0
camera_y_angle = 0
mouse_old_pos_x = 0
mouse_old_pos_y = 0

ambient = True
diffuse = True
specular = True

texture = [0] * 10

no_light = [0.0, 0.0, 0.0, 1.0]
light_ambient = [1.0, 1.0, 1.0, 1.0]
light_diffuse = [1.0, 1.0, 1.0, 1.0]
light_specular = [1.0, 1.0, 1.0, 1.0]
light_position = [2.0, 25.0, 3.0, 1.0]

table_leg_no_mat = [0.0,0.0,0.0,1.0]
table_leg_ambient = [1.000, 0.388, 0.278, 1.0]
table_leg_diffuse = [1.000, 0.388, 0.278, 1.0]
table_leg_specular = [1.000, 0.388, 0.278, 1.0]
table_leg_shiness = [15]

table_top_no_mat = [0.0,0.0,0.0,1.0]
table_top_ambient = [1.000, 0.388, 0.278, 1.0]
table_top_diffuse = [1.000, 0.388, 0.278, 1.0]
table_top_specular = [1.000, 0.388, 0.278, 1.0]
table_top_shiness = [17]

chair_leg_no_mat = [0.0,0.0,0.0,1.0]
chair_leg_ambient = [1.000, 0.388, 0.278, 1.0]
chair_leg_diffuse = [1.000, 0.388, 0.278, 1.0]
chair_leg_specular = [1.000, 0.388, 0.278, 1.0]
chair_leg_shiness = [15]

chair_seat_no_mat = [0.0,0.0,0.0,1.0]
chair_seat_ambient = [1.000, 0.388, 0.278, 1.0]
chair_seat_diffuse = [1.000, 0.388, 0.278, 1.0]
chair_seat_specular = [1.000, 0.388, 0.278, 1.0]
chair_seat_shiness = [17]

chair_top_no_mat = [0.0,0.0,0.0,1.0]
chair_top_ambient = [1.000, 0.388, 0.278, 1.0]
chair_top_diffuse = [1.000, 0.388, 0.278, 1.0]
chair_top_specular = [1.000, 0.388, 0.278, 1.0]
chair_top_shiness = [17]

bed_no_mat = [0.0,0.0,0.0,1.0]
bed_ambient = [0.859, 0.439, 0.576, 1.0]
bed_diffuse = [0.8, 0.48, 0.6, 0.9]
bed_specular = [0.86, 0.50, 0.60, 1.0]
bed_shiness = [13]

bed_head_no_mat = [0.0,0.0,0.0,1.0]
bed_head_ambient = [0.545, 0.271, 0.075, 1.0]
bed_head_diffuse = [0.58, 0.29, 0.06, 0.9]
bed_head_specular = [0.545, 0.271, 0.075, 1.0]
bed_head_shiness = [13]

shelf_no_mat = [0.0,0.0,0.0,1.0]
shelf_ambient = [1.000, 0.388, 0.278, 1.0]
shelf_diffuse = [1.000, 0.388, 0.278, 0.9]
shelf_specular = [1.000, 0.388, 0.278, 1.0]
shelf_shiness = [13]

wall_no_mat = [0.0,0.0,0.0,1.0]
wall_ambient = [0.373, 0.620, 0.627, 1.0]
wall_diffuse = [0.30, 0.6, 0.59, 0.9]
wall_specular = [0.32,0.6, 0.61, 1.0]
wall_shiness = [13]

floor_no_mat = [0.0,0.0,0.0,1.0]
floor_ambient = [0.184, 0.310, 0.310, 0.8]
floor_diffuse = [0.19, 0.3, 0.33, 1.0]
floor_specular = [0.184, 0.35, 0.35, 1.0]
floor_shiness = [15]

ceiling_no_mat = [0.0,0.0,0.0,1.0]
ceiling_ambient = [0.373, 0.620, 0.627, 1.0]
ceiling_diffuse = [0.35, 0.612, 0.65, 0.9]
ceiling_specular = [0.4, 0.65, 0.647, 1.0]
ceiling_shiness = [15]

# Define the Image struct equivalent in Python
class Image:
    def __init__(self):
        self.sizeX = 0
        self.sizeY = 0
        self.data = None

def lighting(no_mat, mat_ambient, mat_diffuse, mat_specular, shiness):
    if ambient:
        glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient)
    else:
        glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat)
    if diffuse:
        glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse)
    else:
        glMaterialfv(GL_FRONT, GL_DIFFUSE, no_mat)
    if specular:
        glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular)
    else:
        glMaterialfv(GL_FRONT, GL_SPECULAR, no_mat)
    glMaterialfv(GL_FRONT, GL_SHININESS, shiness)

def ImageLoad(filename, image):
    # make sure the file in here
    try:
        file = open(filename, "rb")
    except IOError:
        print("Can't open file!")
        return 0

    # seek through the bmp header, up to width/height
    file.seek(18, os.SEEK_CUR)

    # read the width
    data = file.read(4)
    image.sizeX = struct.unpack("<I", data)[0]

    # read the height
    data = file.read(4)
    image.sizeY = struct.unpack("<I", data)[0]

    # calculate the size (assuming 24 bits or 3 bytes per pixel)
    size = image.sizeX * image.sizeY * 3

    # read the plane
    data = file.read(2)
    planes = struct.unpack("<H", data)[0]

    # read the bits per pixel
    file.seek(24, os.SEEK_CUR)

    # read the data
    image.data = bytearray(file.read(size))

    for i in range(0, size, 3):  # reverse all ol color bgr -> rgb
        temp = image.data[i]
        image.data[i] = image.data[i+2]
        image.data[i+2] = temp

    file.close()
    # we're done
    return 1

def loadTexture(file_name, tex_id):
    image1 = Image()
    # Image not loaded
    if not ImageLoad(file_name, image1):
        sys.exit(1)

    global texture
    texture[tex_id] = tex_id

    glBindTexture(GL_TEXTURE_2D, tex_id)

    glTexImage2D(GL_TEXTURE_2D, 0, 3, image1.sizeX, image1.sizeY, 0, GL_RGB, GL_UNSIGNED_BYTE, image1.data)

    # scale linearly when image is bigger than texture
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
    # scale linearly when image is smaller than texture
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)

def draw_fridge():
    # Fridge Body
    lighting(fridge_no_mat, fridge_ambient, fridge_diffuse, fridge_specular, fridge_shiness)
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[4])  # Assuming texture[4] is for the fridge
    glPushMatrix()
    glTranslatef(10, 5, -20)  # Position of the fridge
    glScalef(4, 10, 4)  # Scaling to create a fridge shape
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

    # Fridge Door
    lighting(fridge_door_no_mat, fridge_door_ambient, fridge_door_diffuse, fridge_door_specular, fridge_door_shiness)
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[4])  # Same texture for door
    glPushMatrix()
    glTranslatef(10, 5, -18)  # Slightly forward for the door
    glScalef(3.8, 9.8, 0.2)  # Thin layer for the door
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

    # Fridge Handle
    lighting(fridge_handle_no_mat, fridge_handle_ambient, fridge_handle_diffuse, fridge_handle_specular, fridge_handle_shiness)
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[5])  # Assuming a separate texture for the handle
    glPushMatrix()
    glTranslatef(11.5, 5, -17.9)  # Placing the handle slightly outside
    glScalef(0.2, 3, 0.2)  # Small handle shape
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

def draw_solid_cube(size):
    # Declare variables
    x1 = y1 = z1 = 0
    x2 = y2 = z2 = 0
    x3 = y3 = z3 = 0
    x4 = y4 = z4 = 0

    x1 = -size/2
    y1 = -size/2
    z1 = -size/2

    x2 = size/2
    y2 = -size/2
    z2 = -size/2

    x3 = size/2
    y3 = -size/2
    z3 = size/2

    x4 = -size/2
    y4 = -size/2
    z4 = size/2

    x5 = y5 = z5 = 0
    x6 = y6 = z6 = 0
    x7 = y7 = z7 = 0
    x8 = y8 = z8 = 0

    x5 = -size/2
    y5 = size/2
    z5 = -size/2

    x6 = size/2
    y6 = size/2
    z6 = -size/2

    x7 = size/2
    y7 = size/2
    z7 = size/2

    x8 = -size/2
    y8 = size/2
    z8 = size/2

    n1_x = 0; n1_y = -1; n1_z = 0  # face that faces towards bottom
    n2_x = 0; n2_y = 1; n2_z = 0     # up
    n3_x = 0; n3_y = 0; n3_z = -1    # front
    n4_x = 0; n4_y = 0; n4_z = 1     # back
    n5_x = 1; n5_y = 0; n5_z = 0     # right
    n6_x = -1; n6_y = 0; n6_z = 0    # left

    glBegin(GL_QUADS)
    # Quad 1
    glNormal3f(n1_x, n1_y, n1_z)
    glTexCoord2f(0,0)
    glVertex3f(x1, y1, z1)
    glTexCoord2f(1,0)
    glVertex3f(x2, y2, z2)
    glTexCoord2f(1,1)
    glVertex3f(x3, y3, z3)
    glTexCoord2f(0,1)
    glVertex3f(x4, y4, z4)
    # Quad 2
    glNormal3f(n2_x, n2_y, n2_z)
    glTexCoord2f(0,0)
    glVertex3f(x8, y8, z8)
    glTexCoord2f(1,0)
    glVertex3f(x7, y7, z7)
    glTexCoord2f(1,1)
    glVertex3f(x6, y6, z6)
    glTexCoord2f(0,1)
    glVertex3f(x5, y5, z5)
    # Quad 3
    glNormal3f(n3_x, n3_y, n3_z)
    glTexCoord2f(0,0)
    glVertex3f(x5, y5, z5)
    glTexCoord2f(1,0)
    glVertex3f(x6, y6, z6)
    glTexCoord2f(1,1)
    glVertex3f(x2, y2, z2)
    glTexCoord2f(0,1)
    glVertex3f(x1, y1, z1)
    # Quad 4
    glNormal3f(n4_x, n4_y, n4_z)
    glTexCoord2f(0,0)
    glVertex3f(x7, y7, z7)
    glTexCoord2f(1,0)
    glVertex3f(x8, y8, z8)
    glTexCoord2f(1,1)
    glVertex3f(x4, y4, z4)
    glTexCoord2f(0,1)
    glVertex3f(x3, y3, z3)
    # Quad 5
    glNormal3f(n5_x, n5_y, n5_z)
    glTexCoord2f(0,0)
    glVertex3f(x6, y6, z6)
    glTexCoord2f(1,0)
    glVertex3f(x7, y7, z7)
    glTexCoord2f(1,1)
    glVertex3f(x3, y3, z3)
    glTexCoord2f(0,1)
    glVertex3f(x2, y2, z2)
    # Quad 6
    glNormal3f(n6_x, n6_y, n6_z)
    glTexCoord2f(0,0)
    glVertex3f(x1, y1, z1)
    glTexCoord2f(1,0)
    glVertex3f(x4, y4, z4)
    glTexCoord2f(1,1)
    glVertex3f(x8, y8, z8)
    glTexCoord2f(0,1)
    glVertex3f(x5, y5, z5)
    glEnd()

def draw_table():
    # table legs
    lighting(table_leg_no_mat, table_leg_ambient, table_leg_diffuse, table_leg_specular, table_leg_shiness)
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[4])
    glPushMatrix()
    glScalef(0.5,5,0.5)
    glTranslatef(0,0,10)
    draw_solid_cube(1)
    glPopMatrix()

    glPushMatrix()
    glScalef(0.5,5,0.5)
    glTranslatef(0,0,22)
    draw_solid_cube(1)
    glPopMatrix()

    glPushMatrix()
    glScalef(0.5,5,0.5)
    glTranslatef(5,0,10)
    draw_solid_cube(1)
    glPopMatrix()

    glPushMatrix()
    glScalef(0.5,5,0.5)
    glTranslatef(5,0,22)
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

    # table top
    lighting(table_top_no_mat, table_top_ambient, table_top_diffuse, table_top_specular, table_top_shiness)
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[4])
    glPushMatrix()
    glTranslatef(0,3,8)
    glScalef(6,0.5,9)
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

def draw_shelf():
    lighting(shelf_no_mat, shelf_ambient, shelf_diffuse, shelf_specular, shelf_shiness)
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[5])
    glPushMatrix()
    glTranslatef(15,0,-6)
    glRotatef(90,0,0,1)
    glScalef(12,2,6)
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

def draw_chair(x, z, r):
    # chair legs
    lighting(chair_leg_no_mat, chair_leg_ambient, chair_leg_diffuse, chair_leg_specular, chair_leg_shiness)
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[5])
    glPushMatrix()
    glTranslatef(-4+x, -0.5, 9.5+z)
    glScalef(0.35,4,0.35)
    draw_solid_cube(1)
    glPopMatrix()

    glPushMatrix()
    glTranslatef(-4+x, -0.5, 6.5+z)
    glScalef(0.35,4,0.35)
    draw_solid_cube(1)
    glPopMatrix()

    glPushMatrix()
    glTranslatef(-7+x, -0.5, 9.5+z)
    glScalef(0.35,4,0.35)
    draw_solid_cube(1)
    glPopMatrix()

    glPushMatrix()
    glTranslatef(-7+x, -0.5, 6.5+z)
    glScalef(0.35,4,0.35)
    draw_solid_cube(1)
    glPopMatrix()

    # chair seat
    lighting(chair_seat_no_mat, chair_seat_ambient, chair_seat_diffuse, chair_leg_specular, chair_seat_shiness)
    glPushMatrix()
    glTranslatef(-5.5+x, 1.5, 8+z)
    glScalef(4,1.0,4)
    draw_solid_cube(1)
    glPopMatrix()

    # chair top
    if r == 0:
        lighting(chair_top_no_mat, chair_top_ambient, chair_top_diffuse, chair_seat_specular, chair_top_shiness)
        glPushMatrix()
        glTranslatef(-7.5+x, 3.5, 8+z)
        glRotatef(90,0,0,1)
        glScalef(4,0.3,3.8)
        draw_solid_cube(1)
        glPopMatrix()
    elif r == 1:
        lighting(chair_top_no_mat, chair_top_ambient, chair_top_diffuse, chair_seat_specular, chair_top_shiness)
        glPushMatrix()
        glTranslatef(-8.0+x+2.5, 3.5, 8+z+1.8)
        glRotatef(90,1,0,0)
        glScalef(4,0.3,3.8)
        draw_solid_cube(1)
        glPopMatrix()
    elif r == 2:
        lighting(chair_top_no_mat, chair_top_ambient, chair_top_diffuse, chair_seat_specular, chair_top_shiness)
        glPushMatrix()
        glTranslatef(-8.0+x+2.5, 3.5, 8+z-1.8)
        glRotatef(90,1,0,0)
        glScalef(4,0.3,3.8)
        draw_solid_cube(1)
        glPopMatrix()
    elif r == 3:
        lighting(chair_top_no_mat, chair_top_ambient, chair_top_diffuse, chair_seat_specular, chair_top_shiness)
        glPushMatrix()
        glTranslatef(-7.5+x+4, 3.5, 8+z)
        glRotatef(90,0,0,1)
        glScalef(4,0.3,3.8)
        draw_solid_cube(1)
        glPopMatrix()
    glDisable(GL_TEXTURE_2D)

def draw_wall():
    lighting(wall_no_mat, wall_ambient, wall_diffuse, wall_specular, wall_shiness)
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[1])
    glPushMatrix()
    glTranslatef(0,10,-25)
    glScalef(50,40,0.2)
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[1])
    glPushMatrix()
    glTranslatef(25,10,0)
    glScalef(0.2,40,50)
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[1])
    glPushMatrix()
    glTranslatef(-25,10,0)
    glScalef(0.2,40,50)
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[1])
    glPushMatrix()
    glTranslatef(0,10,25)
    glScalef(50,30,0.2)
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

def draw_floor():
    lighting(floor_no_mat, floor_ambient, floor_diffuse, floor_specular, floor_shiness)
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[3])
    glPushMatrix()
    glTranslatef(0,-3,0)
    glScalef(50,0.2,50)
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

def draw_ceiling():
    lighting(ceiling_no_mat, ceiling_ambient, ceiling_diffuse, ceiling_specular, ceiling_shiness)
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[2])
    glPushMatrix()
    glTranslatef(0,15,0)
    glScalef(50,0.2,50)
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

def draw_bed():
    # bed
    lighting(bed_no_mat, bed_ambient, bed_diffuse, bed_specular, bed_shiness)
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[0])
    glPushMatrix()
    glTranslatef(-4,0,-16)
    glScalef(12,3,6)
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

    # head
    lighting(bed_head_no_mat, bed_head_ambient, bed_head_diffuse, bed_head_specular, bed_head_shiness)
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, texture[0])
    glPushMatrix()
    glTranslatef(1.3,2.5,-16)
    glScalef(1.5,2.5,6)
    draw_solid_cube(1)
    glPopMatrix()
    glDisable(GL_TEXTURE_2D)

def handleKeyPressed(key, x, y):
    # In PyOpenGL, key is passed as a byte string so decode it.
    if isinstance(key, bytes):
        key = key.decode("utf-8")
    global camera_x, camera_y, camera_x_angle, camera_y_angle
    if key == chr(27):
        sys.exit(0)
    elif key == 'a' or key == 'A':
        camera_y = camera_y - 0.5
        # center_z = center_z - 0.5;
    elif key == 'd' or key == 'D':
        camera_y = camera_y + 0.5
        # center_z = center_z + 0.5;
    elif key == 'w' or key == 'W':
        camera_x = camera_x + 0.5
        # center_x = center_x + 0.5;
    elif key == 's' or key == 'S':
        camera_x = camera_x - 0.5
        # center_x = center_x - 0.5;
    elif key == 'u' or key == 'U':
        camera_x_angle += 0.15
        camera_y_angle += 0.15
    elif key == 'k' or key == 'K':
        pass
    elif key == 'h' or key == 'H':
        camera_x_angle -= 0.15
        camera_y_angle -= 0.15
    elif key == 'j' or key == 'J':
        pass
    elif key == '1':
        global ambient
        ambient = not ambient
    elif key == '2':
        global diffuse
        diffuse = not diffuse
    elif key == '3':
        global specular
        specular = not specular

def initRendering():
    glEnable(GL_DEPTH_TEST)

def handleResize(w, h):
    glViewport(0, 0, w, h)

def display():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(60, 1, 5, 100)

    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()

    gluLookAt(camera_x, camera_height, camera_y, camera_x + math.cos(camera_x_angle), camera_height, camera_y + math.sin(camera_y_angle), 0, 1, 0)
    # gluLookAt(eye_x,eye_y,eye_z,center_x,center_y,center_z,0,1,0);
    draw_table()
    draw_chair(0.0, 0, 0)
    draw_chair(12.0, 0, 3)
    draw_chair(5.0, 5.8, 1)
    draw_chair(6.0, -5.8, 2)

    draw_shelf()

    draw_fridge

    draw_wall()
    draw_floor()
    draw_ceiling()
    draw_bed()

    # lighting in scene
    glEnable(GL_LIGHT0)
    if ambient:
        glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient)
    else:
        glLightfv(GL_LIGHT0, GL_AMBIENT, no_light)
    if diffuse:
        glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse)
    else:
        glLightfv(GL_LIGHT0, GL_DIFFUSE, no_light)
    if specular:
        glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular)
    else:
        glLightfv(GL_LIGHT0, GL_SPECULAR, no_light)

    glutSwapBuffers()

def idle():
    glutPostRedisplay()

def main():
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)
    glutInitWindowSize(1000,800)
    glutInitWindowPosition(100,100)
    glutCreateWindow("3d Room")
    initRendering()
    glClearColor(0,0,0,1)
    glEnable(GL_NORMALIZE)
    glEnable(GL_LIGHTING)
    glEnable(GL_LIGHT0)
    glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient)
    glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse)
    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular)
    glLightfv(GL_LIGHT0, GL_POSITION, light_position)
    # Generate textures
    textures = glGenTextures(10)
    for i in range(10):
        texture[i] = textures[i]
    loadTexture("bed_sheet.bmp", 0)  # Give full path of image else it will not work
    loadTexture("wall.bmp", 1)
    loadTexture("ceiling.bmp", 2)
    loadTexture("floor.bmp", 3)
    loadTexture("table.bmp", 4)
    loadTexture("shelf.bmp", 5)

    glutDisplayFunc(display)
    glutKeyboardFunc(handleKeyPressed)
    glutReshapeFunc(handleResize)
    glutIdleFunc(idle)
    glutMainLoop()

if __name__ == '__main__':
    main()
